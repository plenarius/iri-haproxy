# haproxy config for rate limiting and load balancing for IOTA iri node(s)
# Thanks to ralfr, hans0r and nuriel77 for work and feedback

global
    user haproxy
    group haproxy
    log /dev/log local0 debug

defaults
    http-reuse safe
    log global
    option dontlognull
    retries 3
    timeout connect 10s
    timeout client 10s
    timeout queue 10s
    timeout server 300s
    timeout http-request 10s
    maxconn 200
    # How often to check if the server is good, 10 seconds for normal checks
    # 2 seconds if the server is going up or coming down, 30 seconds if it was
    # marked as down
    default-server fall 5 inter 10s fastinter 2s downinter 30s

    log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %rc\ %hr\ %hs\ %rt\ %{+Q}r\ %sslc\ %sslv\ body:%[capture.req.hdr(0)]

    stats hide-version


frontend iri_front
    mode http
    capture request header User-Agent len 128
    option forwardfor
    maxconn 200
    timeout client 5m
    timeout client-fin 5m
    timeout http-request 10s
    option log-separate-errors
    option http-buffer-request

    # Necessary if running on https
    acl is_preflight_request method OPTIONS
    http-request allow if is_preflight_request

    stick-table type ip size 1m expire 5m store gpc0,http_req_rate(5s),http_req_cnt,conn_cnt,sess_cnt

    acl source_is_abuser src_get_gpc0(iri_front) gt 0
    tcp-request connection reject if source_is_abuser
    tcp-request connection track-sc1 src if !source_is_abuser

    # diable client with no TCP body/request lenght
    tcp-request inspect-delay 30s
    acl content_present req_len gt 0
    tcp-request content accept if content_present

    # Enable tracking of counters for ip in the default stick-table
    tcp-request content track-sc0 src

    # drop connections from user with more then 500 requests in 5m
    acl source_is_hacker src_http_req_cnt(iri_front) gt 500
    tcp-request content reject if source_is_hacker

    # id=0 to store body for logging
    declare capture request len 40000
    http-request capture req.body id 0

    # limit OPTIONS method because this is only used on browsers
    # Commented out for https
    # acl slowdown_method method OPTIONS
    # http-request deny if slowdown_method

    # check IRI/IOTA header if present all is fine else redirect or kick
    acl api_header req.hdr(X-IOTA-API-Version) -m found
    http-request deny if !api_header

    # If the content requests contains the regular expression we deny it. We
    # could consider this instead to be inclusive and list only commands that
    # should be valid but that list might grow often. Also check if they are
    # even sending a command
    acl command_exists req.body -m sub -i command
    acl invalid_command req.body -m reg (get|remove|add)Neighbors|setApiRateLimit
    http-request deny unless command_exists
    http-request deny if invalid_command

    bind 0.0.0.0:14265
    use_backend iri_back

backend iri_back
    mode http
    fullconn 200
    timeout server 5m
    timeout server-fin 5m

    # This is important. It sends the server's name (the string after the word
    # "server") in our backend definitions below for our API calls as a 'Host'.
    # header. This doesn't work with the health check though unfortunately.
    http-send-name-header Host

    # Our health check which runs a getNodeInfo and considers nodes with
    # greater than 30 transactions to request as "down" or not synced
    option httpchk POST / HTTP/1.1\r\nHost:\ ha.iota.fm\r\nX-IOTA-API-VERSION:\ 1.4\r\nContent-Type:\ application/json\r\nContent-Length:\ 25\r\n\r\n{\"command\":\"getNodeInfo\"}
    http-check expect rstring (?:\blatestMilestoneIndex\":)(?P<LMI>\d+).+(?:\blatestSolidSubtangleMilestoneIndex\":)(?P=LMI).+(?:\btransactionsToRequest\":)(?:\d\,|[12]\d\,|30\,)

    stick-table type ip size 200k expire 30s store conn_rate(3s),http_req_rate(10s),conn_cur,sess_rate(3s)

    # dynamic stuff for frontend + raise gpc0 counter
    tcp-request content  track-sc2 src
    acl conn_rate_abuse  sc2_conn_rate gt 50
    acl http_rate_abuse  sc2_http_req_rate gt 200
    acl conn_cur_abuse   sc2_conn_cur gt 7

    # abuser marking
    acl mark_as_abuser   sc1_inc_gpc0 gt 0
    tcp-request content  reject if conn_rate_abuse mark_as_abuser
    tcp-request content  reject if http_rate_abuse mark_as_abuser
    tcp-request content  reject if conn_cur_abuse mark_as_abuser

    # If you're using this config for only one node you can change this to
    # balance source
    balance roundrobin
    server iri1.iota.fm iri1.iota.fm:80 weight 3 maxconn 50 check
    server iri2.iota.fm iri2.iota.fm:80 weight 3 maxconn 50 check
    server iri3.iota.fm iri3.iota.fm:80 weight 3 maxconn 50 check
    server iri4.iota.fm iri4.iota.fm:80 weight 3 maxconn 50 check
    server nelson1.iota.fm nelson1.iota.fm:80 weight 3 maxconn 50 check

listen stats
    bind 0.0.0.0:8080
    mode http
    timeout client 1h
    stats enable
    stats hide-version
    stats uri /
    stats realm Strictly\ Private
    stats auth test:secret_password
